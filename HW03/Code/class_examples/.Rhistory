obsError_post <- ggplot(data = data.frame(x = par_infer[[3]]),aes(x)) + stat_density(alpha = 0.5) +
geom_vline(aes(xintercept = obs_error),color = "red")
print(obsError_post)
# proc error
procError_post <- ggplot(data = data.frame(x = par_infer[[4]]),aes(x)) + stat_density(alpha = 0.5) +
geom_vline(aes(xintercept = obs_error),color = "red")
print(procError_post)
View(par_infer)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 1 # initial condition
size <- rep(NA,N);
size[1] <- init;
for(i in 2:N){
size[i] <- size[i-1] + r*size[i-1]*(1-size[i-1]/K)
}
# Now simulating observation error
obs_error <- 5
proc_error <- 5
size_obs <- rep(NA,length(size));
size_obs <- size + rnorm(N,0,obs_error)
plot(size_obs) # Note the problem with negative values!
# Thinning observations down to 20
obs_N <- sort(sample(seq(1,100,1),15))
obs_sizes <- size_obs[obs_N]
plot(obs_N,obs_sizes)
# Putting in list for Stan
stan_data <- list(N=N,M=4,y=obs_sizes,times=obs_N)
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(LOCAL_CPPFLAGS = '-march=native')
initf1 <- function() {
list(r = 0.2, K = 50, mu = array(1,dim=c(1,100)), obs_error = 1, proc_error = 2)
}
logistic_ss1 <- stan(file = "logistic_Bayes_process_error.stan", data = stan_data,
chains = 6, iter = 1000, init = initf1)
#print(logistic_ss1)
mu_infer <- extract(logistic_ss1, pars = c("mu"))[[1]]
post_draws <- as.data.frame(t(mu_infer))
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 1 # initial condition
size <- rep(NA,N);
size[1] <- init;
for(i in 2:N){
size[i] <- size[i-1] + r*size[i-1]*(1-size[i-1]/K)
}
# Now simulating observation error
obs_error <- 5
proc_error <- 5
size_obs <- rep(NA,length(size));
size_obs <- size + rnorm(N,0,obs_error)
plot(size_obs) # Note the problem with negative values!
# Thinning observations down to 20
obs_N <- sort(sample(seq(1,100,1),15))
obs_sizes <- size_obs[obs_N]
plot(obs_N,obs_sizes)
# Putting in list for Stan
stan_data <- list(N=N,M=4,y=obs_sizes,times=obs_N)
# Fitting model
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(LOCAL_CPPFLAGS = '-march=native')
initf1 <- function() {
list(r = 0.2, K = 50, mu = array(1,dim=c(1,100)), obs_error = 1, proc_error = 2)
}
logistic_ss1 <- stan(file = "logistic_Bayes_process_error.stan", data = stan_data,
chains = 6, iter = 1000, init = initf1)
#print(logistic_ss1)
mu_infer <- extract(logistic_ss1, pars = c("mu"))[[1]]
post_draws <- as.data.frame(t(mu_infer))
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 1 # initial condition
size <- rep(NA,N);
size[1] <- init;
for(i in 2:N){
size[i] <- size[i-1] + r*size[i-1]*(1-size[i-1]/K)
}
# Now simulating observation error
obs_error <- 5
proc_error <- 5
size_obs <- rep(NA,length(size));
size_obs <- size + rnorm(N,0,obs_error)
plot(size_obs) # Note the problem with negative values!
# Thinning observations down to 20
obs_N <- sort(sample(seq(1,100,1),15))
obs_sizes <- size_obs[obs_N]
plot(obs_N,obs_sizes)
# Putting in list for Stan
stan_data <- list(N=N,M=4,y=obs_sizes,times=obs_N)
# Fitting model
library(rstan)
options(mc.cores = parallel::detectCores())
rstan_options(auto_write = TRUE)
Sys.setenv(LOCAL_CPPFLAGS = '-march=native')
initf1 <- function() {
list(r = 0.2, K = 50, mu = array(1,dim=c(1,100)), obs_error = 1, proc_error = 2)
}
logistic_ss1 <- stan(file = "logistic_Bayes_process_error.stan", data = stan_data,
chains = 6, iter = 1000, init = initf1)
#print(logistic_ss1)
mu_infer <- extract(logistic_ss1, pars = c("mu"))[[1]]
post_draws <- as.data.frame(t(mu_infer))
library(reshape2)
post_melt <- melt(post_draws)
# Identifying the times
post_melt$time <- rep(seq(1,100,1),3000)
# Plotting model fit to data with posterior draws
# of the latent variable
ggplot() + geom_point(data=data.frame(x=obs_N,y=obs_sizes),aes(x=x,y=y),color="red") +
geom_line(data=post_melt,aes(x=time,y=value,group=variable),size = 0.004) +
theme_bw()
# Plotting inference on the r, K, sigma_obs parameters
par_infer <- extract(logistic_ss1, pars = c("r", "K", "proc_error"))
# r
r_post <- ggplot(data = data.frame(x = par_infer[[1]]),aes(x)) + stat_density(alpha = 0.5) +
geom_vline(aes(xintercept = r),color = "red")
print(r_post)
# K
K_post <- ggplot(data = data.frame(x = par_infer[[2]]),aes(x)) + stat_density(alpha = 0.5) +
geom_vline(aes(xintercept = K),color = "red")
print(K_post)
proc_error = 2
N = 50
init = 20
size <- rep(NA,N);
size[1] <- init;
for(i in 2:N){
size[i] <- size[i-1] + r*size[i-1]*(1-size[i-1]/K) + rnorm(N,0,proc_error)
}
proc_error = 2
N = 50
init = 20
size <- rep(NA,N);
size[1] <- init;
proc_error = 2
N = 50
init = 20
r = 0.1
K = 100
size <- rep(NA,N);
size[1] <- init;
for(i in 2:N){
size[i] <- size[i-1] + r*size[i-1]*(1-size[i-1]/K) + rnorm(N,0,proc_error)
}
obs_N = sort(sample(seq(1,50,1),15))
obs_N = seq(1,50,1)
length(size)
proc_error = 2
N = 50
init = 20
r = 0.1
K = 100
y = rep(NA,N);
y[1] = init;
for(i in 2:N){
y[i] <- y[i-1] + r*y[i-1]*(1-y[i-1]/K) + rnorm(1,0,proc_error)
}
obs_N = seq(1,50,1)
plot(obs_N,y)
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessError.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessError.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessError.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessError.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessError.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessError.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessError.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessError.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessError.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessError.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessError.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessError.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessError.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessErrorOnly.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessErrorOnly.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessErrorOnly.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/HW_StateSpace_LogisticProcessErrorOnly.R')
plot(logistic_ss1)
print(logistic_ss1)
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/logistic4_Bayes.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/logistic4_Bayes.R')
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/logistic4_Bayes.R')
z <- rep(NA,N);
plot(n_plot, y[1,:])
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/logistic4_Bayes.R', echo=TRUE)
plot(n_plot,z)
N <- 50 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 1 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma((z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
warnings()
N <- 50 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 1 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 50 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 50 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 50 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 50 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 50 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 50 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 50 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
N <- 100 # Length of simulation
r <- 0.1 # intrinsic growth rate
K <- 100 # carrying capacity
init <- 5 # initial condition
M = N
KK = 5
k =0.2
z <- rep(NA,N);
z[1] <- init;
for(i in 2:N){
z[i]  = rgamma(1,(z[i-1] + r*z[i-1]*(1-z[i-1]/K))/k,(1/k));
}
plot(z)
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/logistic4_Bayes.R', echo=TRUE)
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/logistic4_Bayes.R', echo=TRUE)
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/logistic4_Bayes.R', echo=TRUE)
warnings()
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/logistic4_Bayes.R', echo=TRUE)
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/logistic4_Bayes.R', echo=TRUE)
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/logistic4_Bayes.R', echo=TRUE)
source('~/2019_08_Wilson_Bayesian_Methods/BHM_Assignments/HW03/Code/logistic4_Bayes.R', echo=TRUE)
